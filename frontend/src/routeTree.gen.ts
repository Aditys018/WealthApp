/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ResetImport } from './routes/reset'
import { Route as RegisterImport } from './routes/register'
import { Route as MapsImport } from './routes/maps'
import { Route as LoginImport } from './routes/login'
import { Route as ListImport } from './routes/list'
import { Route as InviteImport } from './routes/invite'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as AdmincontrolImport } from './routes/admincontrol'
import { Route as IndexImport } from './routes/index'
import { Route as DetailsIdImport } from './routes/details/$id'
import { Route as DemoTanstackQueryImport } from './routes/demo.tanstack-query'

// Create/Update Routes

const ResetRoute = ResetImport.update({
  id: '/reset',
  path: '/reset',
  getParentRoute: () => rootRoute,
} as any)

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const MapsRoute = MapsImport.update({
  id: '/maps',
  path: '/maps',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ListRoute = ListImport.update({
  id: '/list',
  path: '/list',
  getParentRoute: () => rootRoute,
} as any)

const InviteRoute = InviteImport.update({
  id: '/invite',
  path: '/invite',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const AdmincontrolRoute = AdmincontrolImport.update({
  id: '/admincontrol',
  path: '/admincontrol',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DetailsIdRoute = DetailsIdImport.update({
  id: '/details/$id',
  path: '/details/$id',
  getParentRoute: () => rootRoute,
} as any)

const DemoTanstackQueryRoute = DemoTanstackQueryImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admincontrol': {
      id: '/admincontrol'
      path: '/admincontrol'
      fullPath: '/admincontrol'
      preLoaderRoute: typeof AdmincontrolImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/invite': {
      id: '/invite'
      path: '/invite'
      fullPath: '/invite'
      preLoaderRoute: typeof InviteImport
      parentRoute: typeof rootRoute
    }
    '/list': {
      id: '/list'
      path: '/list'
      fullPath: '/list'
      preLoaderRoute: typeof ListImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/maps': {
      id: '/maps'
      path: '/maps'
      fullPath: '/maps'
      preLoaderRoute: typeof MapsImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/reset': {
      id: '/reset'
      path: '/reset'
      fullPath: '/reset'
      preLoaderRoute: typeof ResetImport
      parentRoute: typeof rootRoute
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryImport
      parentRoute: typeof rootRoute
    }
    '/details/$id': {
      id: '/details/$id'
      path: '/details/$id'
      fullPath: '/details/$id'
      preLoaderRoute: typeof DetailsIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admincontrol': typeof AdmincontrolRoute
  '/dashboard': typeof DashboardRoute
  '/invite': typeof InviteRoute
  '/list': typeof ListRoute
  '/login': typeof LoginRoute
  '/maps': typeof MapsRoute
  '/register': typeof RegisterRoute
  '/reset': typeof ResetRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/details/$id': typeof DetailsIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admincontrol': typeof AdmincontrolRoute
  '/dashboard': typeof DashboardRoute
  '/invite': typeof InviteRoute
  '/list': typeof ListRoute
  '/login': typeof LoginRoute
  '/maps': typeof MapsRoute
  '/register': typeof RegisterRoute
  '/reset': typeof ResetRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/details/$id': typeof DetailsIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admincontrol': typeof AdmincontrolRoute
  '/dashboard': typeof DashboardRoute
  '/invite': typeof InviteRoute
  '/list': typeof ListRoute
  '/login': typeof LoginRoute
  '/maps': typeof MapsRoute
  '/register': typeof RegisterRoute
  '/reset': typeof ResetRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/details/$id': typeof DetailsIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admincontrol'
    | '/dashboard'
    | '/invite'
    | '/list'
    | '/login'
    | '/maps'
    | '/register'
    | '/reset'
    | '/demo/tanstack-query'
    | '/details/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admincontrol'
    | '/dashboard'
    | '/invite'
    | '/list'
    | '/login'
    | '/maps'
    | '/register'
    | '/reset'
    | '/demo/tanstack-query'
    | '/details/$id'
  id:
    | '__root__'
    | '/'
    | '/admincontrol'
    | '/dashboard'
    | '/invite'
    | '/list'
    | '/login'
    | '/maps'
    | '/register'
    | '/reset'
    | '/demo/tanstack-query'
    | '/details/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdmincontrolRoute: typeof AdmincontrolRoute
  DashboardRoute: typeof DashboardRoute
  InviteRoute: typeof InviteRoute
  ListRoute: typeof ListRoute
  LoginRoute: typeof LoginRoute
  MapsRoute: typeof MapsRoute
  RegisterRoute: typeof RegisterRoute
  ResetRoute: typeof ResetRoute
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
  DetailsIdRoute: typeof DetailsIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdmincontrolRoute: AdmincontrolRoute,
  DashboardRoute: DashboardRoute,
  InviteRoute: InviteRoute,
  ListRoute: ListRoute,
  LoginRoute: LoginRoute,
  MapsRoute: MapsRoute,
  RegisterRoute: RegisterRoute,
  ResetRoute: ResetRoute,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
  DetailsIdRoute: DetailsIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admincontrol",
        "/dashboard",
        "/invite",
        "/list",
        "/login",
        "/maps",
        "/register",
        "/reset",
        "/demo/tanstack-query",
        "/details/$id"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admincontrol": {
      "filePath": "admincontrol.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/invite": {
      "filePath": "invite.tsx"
    },
    "/list": {
      "filePath": "list.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/maps": {
      "filePath": "maps.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/reset": {
      "filePath": "reset.tsx"
    },
    "/demo/tanstack-query": {
      "filePath": "demo.tanstack-query.tsx"
    },
    "/details/$id": {
      "filePath": "details/$id.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
