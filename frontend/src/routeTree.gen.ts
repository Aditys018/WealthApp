/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as MapsImport } from './routes/maps'
import { Route as EmployeeinvitationImport } from './routes/employeeinvitation'
import { Route as AdmindashboardImport } from './routes/admindashboard'
import { Route as LoginImport } from './routes/login'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as IndexImport } from './routes/index'
import { Route as DemoTanstackQueryImport } from './routes/demo.tanstack-query'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const MapsRoute = MapsImport.update({
  id: '/maps',
  path: '/maps',
  getParentRoute: () => rootRoute,
} as any)

const EmployeeinvitationRoute = EmployeeinvitationImport.update({
  id: '/employeeinvitation',
  path: '/employeeinvitation',
  getParentRoute: () => rootRoute,
} as any)

const AdmindashboardRoute = AdmindashboardImport.update({
  id: '/admindashboard',
  path: '/admindashboard',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DemoTanstackQueryRoute = DemoTanstackQueryImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admindashboard': {
      id: '/admindashboard'
      path: '/admindashboard'
      fullPath: '/admindashboard'
      preLoaderRoute: typeof AdmindashboardImport
      parentRoute: typeof rootRoute
    }
    '/employeeinvitation': {
      id: '/employeeinvitation'
      path: '/employeeinvitation'
      fullPath: '/employeeinvitation'
      preLoaderRoute: typeof EmployeeinvitationImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/maps': {
      id: '/maps'
      path: '/maps'
      fullPath: '/maps'
      preLoaderRoute: typeof MapsImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admindashboard': typeof AdmindashboardRoute
  '/employeeinvitation': typeof EmployeeinvitationRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/maps': typeof MapsRoute
  '/register': typeof RegisterRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admindashboard': typeof AdmindashboardRoute
  '/employeeinvitation': typeof EmployeeinvitationRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/maps': typeof MapsRoute
  '/register': typeof RegisterRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admindashboard': typeof AdmindashboardRoute
  '/employeeinvitation': typeof EmployeeinvitationRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/maps': typeof MapsRoute
  '/register': typeof RegisterRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    |
    | '/'
    | '/admindashboard'
    | '/employeeinvitation'
   
    | '/dashboard'
    | '/login'
    | '/maps'
   
    | '/register'
   
    | '/demo/tanstack-query'
  fileRoutesByTo: FileRoutesByTo
  to:
    |
    | '/'
    | '/admindashboard'
    | '/employeeinvitation'
   
    | '/dashboard'
    | '/login'
    | '/maps'
   
    | '/register'
   
    | '/demo/tanstack-query'
  id:
    |
    | '__root__'
   
    | '/'
    | '/admindashboard'
    | '/employeeinvitation'
   
    | '/dashboard'
    | '/login'
    | '/maps'
   
    | '/register'
   
    | '/demo/tanstack-query'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdmindashboardRoute: typeof AdmindashboardRoute
  EmployeeinvitationRoute: typeof EmployeeinvitationRoute
  DashboardRoute: typeof DashboardRoute
  LoginRoute: typeof LoginRoute
  MapsRoute: typeof MapsRoute
  RegisterRoute: typeof RegisterRoute
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdmindashboardRoute: AdmindashboardRoute,
  EmployeeinvitationRoute: EmployeeinvitationRoute,
  DashboardRoute: DashboardRoute,
  LoginRoute: LoginRoute,
  MapsRoute: MapsRoute,
  RegisterRoute: RegisterRoute,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admindashboard",
        "/employeeinvitation",
        "/dashboard",
        "/login",
        "/maps",
        "/register",
        "/demo/tanstack-query"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admindashboard": {
      "filePath": "admindashboard.tsx"
    },
    "/employeeinvitation": {
      "filePath": "employeeinvitation.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/maps": {
      "filePath": "maps.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/demo/tanstack-query": {
      "filePath": "demo.tanstack-query.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
