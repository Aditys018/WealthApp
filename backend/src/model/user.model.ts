import mongoose, { Schema } from "mongoose";
import { IUserProfile } from "../types";

const userProfileSchema = new Schema<IUserProfile>(
	{
		basicDetails: {
			firstName: String,
			lastName: String,
			gender: { type: String, enum: ["Male", "Female"] },
			birthday: String, // YYYY-MM-DD format
			currentCountry: String,
			currentCity: String,
			hometown: String,
			hometownCountry: String,
			height: Number, // in cm
			email: { type: String, unique: true },
			phoneNumber: String,
			role: { type: String, enum: ["USER", "FREE_USER"], required: true },
			description: String,
			overallSummary: String,
		},
		workAndEducation: {
			undergraduateCollege: String,
			undergraduateDegree: String,
			postgraduateCollege: String,
			postgraduateDegree: String,
			professionalStatus: String,
			currentCompany: String,
			designation: String,
			annualIncome: Number,
			description: String,
		},
		background: {
			maritalStatus: {
				type: String,
				enum: ["Single", "Married", "Divorced", "Widowed"],
			},
			parentsLocation: String,
			language: [String],
			numberOfSiblings: Number,
			caste: String,
			fatherOccupation: String,
			motherOccupation: String,
			religion: String,
			briefAboutFamily: String,
			description: String,
		},
		lifestyleAndPersonality: {
			bodyType: {
				type: String,
				enum: ["Slim", "Athletic", "Average", "Heavy"],
			},
			workout: { type: String, },
			foodPreferences: {
				type: String,
				enum: ["Vegetarian", "Non-Vegetarian", "Eggetarian", "Vegan"],
			},
			drinkingHabits: { type: String, },
			smokingHabits: { type: String, },
			politicalViews: {
				type: String,
				enum: ["Liberal", "Conservative", "Moderate", "Apathetic"],
			},
			religiousViews: {
				type: String,
				enum: ["Devout", "Moderate", "Agnostic", "Atheist", "Spiritual"],
			},
			stayWithParents: { type: String, enum: ["Yes", "No"] },
			hobbies: String,
			personalGoals: String,
			description: String,
		},
		partnerPreferences: {
			lookForInPartner: String,
			partnerConstraints: {
				type: [String],
				enum: ["Same Caste", "Same Religion", "Same Region", "No Constraints"],
			},
			childrenViews: {
				type: String,
				enum: ["Want", "Don't Want", "Open to Discussion"],
			},
			openToRelocate: { type: String, enum: ["Yes", "No"] },
			openToPets: { type: String, enum: ["Yes", "No"] },
			description: String,
		},
		profilePictures: [String],
		documents: [{ name: String, url: String }],
		proofDocuments: {
			aadhaarOrPassport: String,
			lastCompanyPaySlip: String,
			collegeDegree: String,
		},
		authentication: {
			username: String, // Email
			password: String, // Auto-generated by Matchmaker
			isPasswordResetRequired: Boolean,
		},
		paymentDetails: {
			invoiceNumbers: [String],
			amount: Number,
			paymentDate: Number, // ISO Timestamp
			noOfMatchesProposed: Number,
		},
		matchmaker: {
			matchmakerName: String,
			matchmakerId: String,
		},
		profileStage: {
			type: String,
			enum: ["INCOMPLETE_INFORMATION", "UNDER_REVIEW", "REJECTED", "APPROVED"],
			default: "INCOMPLETE_INFORMATION",
		},
		formStage: {
			type: String,
			enum: [
				"BASIC_DETAILS",
				"WORK_AND_EDUCATION",
				"BACKGROUND",
				"LIFESTYLE_AND_PERSONALITY",
				"PARTNER_PREFERENCES",
				"PROFILE_PICTURES",
				"DOCUMENTS",
			],
			default: "BASIC_DETAILS",
		},
    createdAt: {
      type: Date,
      default: () => new Date(),
    },
    updatedAt: {
      type: Date,
      default: () => new Date(),
    },
	},

	{ timestamps: true }
);

export const UserProfile = mongoose.model("user", userProfileSchema);
